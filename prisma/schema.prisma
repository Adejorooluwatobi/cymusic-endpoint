// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String?
  displayName String
  isActive    Boolean  @default(true)
  isVerified  Boolean  @default(false)
  googleId    String?
  appleId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  profile   Profile?
  playlists Playlist[]
  artistProfiles ArtistProfile[]
}

model Admin {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String?
  displayName String
  isActive    Boolean  @default(true)
  isVerified  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  profile   Profile?
  playlists Playlist[]
}

model SuperAdmin {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String?
  displayName String
  isActive    Boolean  @default(true)
  isVerified  Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  profile   Profile?
  playlists Playlist[]
}

model Artist {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String?
  displayName String
  isActive    Boolean  @default(true)
  isVerified  Boolean  @default(false)
  googleId    String?
  appleId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  profile   Profile?
  music     Music[]
  albums    Album[]
  playlists Playlist[]
  artistProfiles ArtistProfile[]
}

model Profile {
  id           String   @id @default(cuid())
  phoneNumber  String
  address      String
  city         String
  state        String
  country      String
  postalCode   String
  dateOfBirth  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  userId       String?  @unique
  adminId      String?  @unique
  superAdminId String?  @unique
  artistId     String?  @unique
  
  user       User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  admin      Admin?      @relation(fields: [adminId], references: [id], onDelete: Cascade)
  superAdmin SuperAdmin? @relation(fields: [superAdminId], references: [id], onDelete: Cascade)
  artist     Artist?     @relation(fields: [artistId], references: [id], onDelete: Cascade)
}

model Music {
  id            String   @id @default(cuid())
  title         String
  artistId      String
  audioFileUrl  String
  coverImageUrl String?
  genre         String?
  duration      String?
  uploadDate    DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  artist        Artist         @relation(fields: [artistId], references: [id], onDelete: Cascade)
  albumMusic    AlbumMusic[]
  playlistMusic PlaylistMusic[]
}

model Album {
  id            String   @id @default(cuid())
  title         String
  artistId      String
  coverImageUrl String?
  description   String?
  releaseDate   DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  artist     Artist       @relation(fields: [artistId], references: [id], onDelete: Cascade)
  albumMusic AlbumMusic[]
}

model AlbumMusic {
  albumId String
  musicId String
  
  album Album @relation(fields: [albumId], references: [id], onDelete: Cascade)
  music Music @relation(fields: [musicId], references: [id], onDelete: Cascade)
  
  @@id([albumId, musicId])
}



model Playlist {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  admin       Admin?   @relation(fields: [adminId], references: [id], onDelete: Cascade)
  adminId     String?
  superAdmin  SuperAdmin? @relation(fields: [superAdminId], references: [id], onDelete: Cascade)
  superAdminId String?
  artist      Artist?  @relation(fields: [artistId], references: [id], onDelete: Cascade)
  artistId    String?
  playlistMusic PlaylistMusic[]
}

model PlaylistMusic {
  id        String   @id @default(cuid())
  playlist  Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId String
  music     Music    @relation(fields: [musicId], references: [id], onDelete: Cascade)
  musicId   String
  @@unique([playlistId, musicId])
}


model ArtistProfile {
  id              String   @id @default(cuid())
  userId          String?
  artistId        String
  royaltyRate     Float
  activeFollowers Int
  country         String?
  bio             String?
  profileImageUrl String?
  isVerified      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  artist          Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}